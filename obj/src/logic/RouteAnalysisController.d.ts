import { ConfigParams, IOpenable } from 'pip-services3-commons-node';
import { IConfigurable } from 'pip-services3-commons-node';
import { IReferences } from 'pip-services3-commons-node';
import { IReferenceable } from 'pip-services3-commons-node';
import { FilterParams } from 'pip-services3-commons-node';
import { PagingParams } from 'pip-services3-commons-node';
import { DataPage } from 'pip-services3-commons-node';
import { ICommandable } from 'pip-services3-commons-node';
import { CommandSet } from 'pip-services3-commons-node';
import { ObjectRouteV1 } from 'pip-clients-routes-node';
import { ObjectPositionV1 } from '../data/version1/ObjectPositionV1';
import { CurrentObjectRouteV1 } from '../data/version1/CurrentObjectRouteV1';
import { IRouteAnalysisController } from './IRouteAnalysisController';
export declare class RouteAnalysisController implements IConfigurable, IReferenceable, IOpenable, ICommandable, IRouteAnalysisController {
    private static _defaultConfig;
    private _cache;
    private _lock;
    private _logger;
    private _dependencyResolver;
    private _persistence;
    private _routesClient;
    private _commandSet;
    private _lockTimeout;
    private _cacheTimeout;
    private _offlineCheckTimer;
    private _offlineCheckInterval;
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    getCommandSet(): CommandSet;
    isOpen(): boolean;
    open(correlationId: string, callback: (err: any) => void): void;
    close(correlationId: string, callback: (err: any) => void): void;
    private toRoute;
    private toHistoricalRoute;
    private filterPositions;
    private compressPositions;
    private getLastPosition;
    getCurrentRoutes(correlationId: string, filter: FilterParams, paging: PagingParams, callback: (err: any, page: DataPage<ObjectRouteV1>) => void): void;
    getCurrentRoute(correlationId: string, objectId: string, fromTime: Date, toTime: Date, callback: (err: any, route: ObjectRouteV1) => void): void;
    getNextRoute(route: CurrentObjectRouteV1, pos: ObjectPositionV1): CurrentObjectRouteV1;
    private acquireRouteLock;
    private releaseRouteLock;
    private loadRouteFromCache;
    private saveRouteToCache;
    private fixPosition;
    addPosition(correlationId: string, position: ObjectPositionV1, callback?: (err: any) => void): void;
    addPositions(correlationId: string, positions: ObjectPositionV1[], callback?: (err: any) => void): void;
    private processObsoleteRoute;
    processObsoleteRoutes(callback?: (err: any) => void): void;
}
